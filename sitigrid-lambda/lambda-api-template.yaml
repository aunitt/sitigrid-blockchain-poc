# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
 
AWSTemplateFormatVersion:                         '2010-09-09'
Transform:                                        'AWS::Serverless-2016-10-31'
Description:                                      >
  This template creates a Lambda function and its associated IAM role and policies.  
  It also creates the VPC endpoint needed to interface with Secrets Manager.
Parameters:
  PEERENDPOINT:
    Type:                                         String
  CAENDPOINT:
    Type:                                         String
  ORDERERENDPOINT:
    Type:                                         String
  CHANNELNAME:
    Type:                                         String
  CHAINCODEID:
    Type:                                         String
  MSP:
    Type:                                         String
  MEMBERNAME:
    Type:                                         String
  SECURITYGROUPID:
    Type:                                         String
  SUBNETID:
    Type:                                         String
  VPCID:
    Type:                                         String
  LAMBDANAME:
    Type:                                         String
Resources:
  SecretsManagerReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - "secretsmanager:GetResourcePolicy"
          - "secretsmanager:GetSecretValue"
          - "secretsmanager:DescribeSecret"
          - "secretsmanager:ListSecretVersionIds"
          "Resource": !Sub 'arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:dev/fabricOrgs/${MEMBERNAME}/*'
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SecretsManagerReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  SitigridLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: ./src
      FunctionName: !Ref LAMBDANAME
      MemorySize: 512
      Role: !GetAtt LambdaRole.Arn
      Timeout: 15
      Environment:
        Variables:
          CA_ENDPOINT: !Ref CAENDPOINT
          PEER_ENDPOINT: !Ref PEERENDPOINT
          ORDERER_ENDPOINT: !Ref ORDERERENDPOINT
          CHANNEL_NAME: !Ref CHANNELNAME
          CHAIN_CODE_ID: !Ref CHAINCODEID
          CRYPTO_FOLDER: /tmp
          MSP: !Ref MSP
          MEMBERNAME: !Ref MEMBERNAME
      VpcConfig:
        SecurityGroupIds: 
          - !Ref SECURITYGROUPID
        SubnetIds:
          - !Ref SUBNETID
      Events:
        GetCustomers:
          Type: Api
          Properties:
            Path: /customers
            Method: get
            RestApiId: !Ref SitigridAPIGateway
        CreateCustomer:
          Type: Api
          Properties:
            Path: /customers
            Method: post
            RestApiId: !Ref SitigridAPIGateway
        GetCustomer:
          Type: Api
          Properties:
            Path: /customers/{customerName}
            Method: get
            RestApiId: !Ref SitigridAPIGateway
        CreateProductionRecord:
          Type: Api
          Properties:
            Path: /productions
            Method: post
            RestApiId: !Ref SitigridAPIGateway
        GetProductions:
          Type: Api
          Properties:
            Path: /productions
            Method: get
            RestApiId: !Ref SitigridAPIGateway
        CreateConsumptionRecord:
          Type: Api
          Properties:
            Path: /consumptions
            Method: post
            RestApiId: !Ref SitigridAPIGateway
        GetConsumptions:
          Type: Api
          Properties:
            Path: /consumptions
            Method: get
            RestApiId: !Ref SitigridAPIGateway
  SecretsManagerVPCE:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      SecurityGroupIds:
        - !Ref SECURITYGROUPID
      SubnetIds:
        - !Ref SUBNETID
      VpcEndpointType: Interface
      VpcId: !Ref VPCID
      ServiceName: com.amazonaws.us-east-1.secretsmanager
      PrivateDnsEnabled: true
  SitigridAPIGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: Sitigrid API
      StageName: Dev
      DefinitionUri: ./sitigrid-API-swagger.yml
  Deployment: 
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref SitigridAPIGateway
      Description: "Development deployment"
      StageName: "MyDummyStage"
  DevStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: DevStage
      Description: Dev Stage
      RestApiId: !Ref SitigridAPIGateway
      DeploymentId: !Ref Deployment
Outputs:
  APIGatewayURL:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://${SitigridAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"
