---
swagger: "2.0"
info:
  version: "2019-11-13T11:12:00Z"
  title: "Sitigrid API"
host: "api.sitigrid-demo.co.uk"
schemes:
- "https"
paths:
  /consumptions:
    get:
      description: "Returns all the consumption records in the blockchain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryAllConsumptions\",\n  \"chaincodeFunctionArgs\": {},\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      description: "Adds a new consumption record to the blockchain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Consumption"
        required: true
        schema:
          $ref: "#/definitions/Consumption"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/TransactionId"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"invoke\",\n  \"chaincodeFunction\"\
            : \"createConsumptionRecord\",\n  \"chaincodeFunctionArgs\": {\n     \
            \ #set( $body = $util.parseJson($input.body) )\n      \"consumptionId\"\
            : \"$context.requestId\",\n      \"MPAN\": \"$body.MPAN\",\n      \"consumptionAmount\"\
            : $body.consumptionAmount,\n      \"consumptionDate\":\"$context.requestTimeEpoch\"\
            \n  },\n  \"fabricUsername\": \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meters:
    get:
      description: "Returns all the meters registered"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryAllMeterpoints\",\n  \"chaincodeFunctionArgs\": {},\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      description: "Registers a new meterpoint in the blockchain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Meterpoint"
        required: true
        schema:
          $ref: "#/definitions/Meterpoint"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/TransactionId"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"invoke\",\n  \"chaincodeFunction\"\
            : \"createMeterpoint\",\n  \"chaincodeFunctionArgs\": {\n      #set( $body\
            \ = $util.parseJson($input.body) )\n      \"MPAN\": \"$body.meterpoint\"\
            ,\n   \"registeredDate\":\"$context.requestTimeEpoch\"\n  },\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meters/{meterpoint}:
    get:
      description: "Returns the meterpoint record of the given meterpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "meterpoint"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryMeterpoint\",\n  \"chaincodeFunctionArgs\": {\n      \"MPAN\"\
            : \"$input.params('meterpoint')\"\n  },\n  \"fabricUsername\": \"lambdaUser\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meters/{meterpoint}/consumptions:
    get:
      description: "Returns all the consumption records for the given meterpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "meterpoint"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryConsumptionsForMeterpoint\",\n  \"chaincodeFunctionArgs\": {\n\
            \      \"MPAN\": \"$input.params('meterpoint')\"\n  },\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meters/{meterpoint}/productions:
    get:
      description: "Returns all the production methods for a given meterpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "meterpoint"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryProductionsForMeterpoint\",\n  \"chaincodeFunctionArgs\": {\n\
            \      \"MPAN\": \"$input.params('meterpoint')\"\n  },\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meters/{meterpoint}/totalconsumptions:
    get:
      description: "Returns the total consumption amount for the given meterpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "meterpoint"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryTotalConsumptionsForMeterpoint\",\n  \"chaincodeFunctionArgs\"\
            : {\n      \"MPAN\": \"$input.params('meterpoint')\"\n  },\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meters/{meterpoint}/totalproductions:
    get:
      description: "Returns the total production amount for the given meterpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "meterpoint"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryTotalProductionsForMeterpoint\",\n  \"chaincodeFunctionArgs\"\
            : {\n      \"MPAN\": \"$input.params('meterpoint')\"\n  },\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /productions:
    get:
      description: "Returns all the production methods in the blockchain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"queryObject\",\n  \"chaincodeFunction\"\
            : \"queryAllProductions\",\n  \"chaincodeFunctionArgs\": {},\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      description: "Adds a new production method to the blockchain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Production"
        required: true
        schema:
          $ref: "#/definitions/Production"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:071760450533:function:sitigrid-fabric-lambda/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"functionType\": \"invoke\",\n  \"chaincodeFunction\"\
            : \"createProductionRecord\",\n  \"chaincodeFunctionArgs\": {\n      #set(\
            \ $body = $util.parseJson($input.body) )\n      \"productionId\": \"$context.requestId\"\
            ,\n      \"MPAN\": \"$body.MPAN\",\n      \"productionAmount\": $body.productionAmount,\n\
            \      \"productionDate\":\"$context.requestTimeEpoch\"\n  },\n  \"fabricUsername\"\
            : \"lambdaUser\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  Consumption:
    type: "object"
    required:
    - "consumptionAmount"
    properties:
      consumptionAmount:
        type: "integer"
      meterpoint:
        type: "string"
  Empty:
    type: "object"
    title: "Empty Schema"
  Production:
    type: "object"
    required:
    - "productionAmount"
    properties:
      productionAmount:
        type: "integer"
      meterpoint:
        type: "string"
  Meterpoint:
    type: "object"
    properties:
      meterpoint:
        type: "string"
  TransactionId:
    type: "object"
    properties:
      transactionId:
        type: "string"
x-amazon-apigateway-documentation:
  version: "1.0"
  createdDate: "2020-06-10T09:28:42Z"
  documentationParts:
  - location:
      type: "METHOD"
      path: "/consumptions"
      method: "GET"
    properties:
      description: "Returns all the consumption records in the blockchain"
  - location:
      type: "METHOD"
      path: "/consumptions"
      method: "POST"
    properties:
      description: "Adds a new consumption record to the blockchain"
  - location:
      type: "METHOD"
      path: "/meters/{meterpoint}/consumptions"
      method: "GET"
    properties:
      description: "Returns all the consumption records for the given meterpoint"
  - location:
      type: "METHOD"
      path: "/meters/{meterpoint}/productions"
      method: "GET"
    properties:
      description: "Returns all the production methods for a given meterpoint"
  - location:
      type: "METHOD"
      path: "/meters/{meterpoint}/totalconsumptions"
      method: "GET"
    properties:
      description: "Returns the total consumption amount for the given meterpoint"
  - location:
      type: "METHOD"
      path: "/meters/{meterpoint}/totalproductions"
      method: "GET"
    properties:
      description: "Returns the total production amount for the given meterpoint"
  - location:
      type: "METHOD"
      path: "/meters/{meterpoint}"
      method: "GET"
    properties:
      description: "Returns the meterpoint record of the given meterpoint"
  - location:
      type: "METHOD"
      path: "/meters"
      method: "GET"
    properties:
      description: "Returns all the meters registered"
  - location:
      type: "METHOD"
      path: "/meters"
      method: "POST"
    properties:
      description: "Registers a new meterpoint in the blockchain"
  - location:
      type: "METHOD"
      path: "/productions"
      method: "GET"
    properties:
      description: "Returns all the production methods in the blockchain"
  - location:
      type: "METHOD"
      path: "/productions"
      method: "POST"
    properties:
      description: "Adds a new production method to the blockchain"
  - location:
      type: "MODEL"
      name: "Empty"
    properties:
      title: "Empty Schema"
  - location:
      type: "RESOURCE"
      path: "/consumptions"
    properties:
      description: ""
  - location:
      type: "RESPONSE"
      path: "/consumptions"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/consumptions"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/consumptions"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/consumptions"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/consumptions"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/productions"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/productions"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/totalconsumptions"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/totalconsumptions"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/totalproductions"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}/totalproductions"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters/{meterpoint}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/meters"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/productions"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/productions"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/productions"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
